generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
}

enum EditorStatus {
    Beginner
    Editor
    Administrator
}

model User {
    id              String       @id @db.VarChar(255)
    name            String       @db.VarChar(255)
    email           String       @unique @db.VarChar(255)
    password        String       @db.VarChar(255)
    createdAt       DateTime     @default(now()) @map(name: "created_at")
    contents        Content[]
    mentionedBy     Content[]    @relation("mention")
    likes           Content[]    @relation("likes")
    dislikes        Content[]    @relation("dislikes")
    
    following       User[]       @relation("following")
    followedBy      User[]       @relation("following")

    authenticated   Boolean      @default(false)
    editorStatus    EditorStatus @default(Beginner)

    subscriptionsUsed        Subscription[]
    subscriptionsBought      Subscription[]  @relation("bought")

    @@map(name: "users")
}


model Subscription {
    id                String      @id @default(cuid())
    user              User?       @relation(fields: [userId], references: [id])
    userId            String?
    createdAt         DateTime    @default(now()) @map(name: "created_at")

    boughtBy          User       @relation("bought", fields: [boughtByUserId], references: [id])
    boughtByUserId    String

    usedAt            DateTime?
}

enum ProtectionLevel {
    Unprotected
    Administrator
}

model Entity {
    id              String       @id
    name            String       @unique @db.VarChar(255)
    mentionedBy     Content[]    @relation("entityMention")
    content         Content      @relation(fields: [contentId], references: [id])
    contentId       String       @unique
    protection      ProtectionLevel @default(Unprotected)
    isPublic        Boolean      @default(false)
}


enum ContentType {
    Comment
    Post
    FastPost
    EntityContent
}


model Content {
    id                String      @id @default(cuid())
    text              String
    history           String[]
    createdAt         DateTime    @default(now()) @map(name: "created_at")
    type              ContentType

    author            User?       @relation(fields: [authorId], references: [id])
    authorId          String?
    
    mentionedUsers    User[]      @relation("mention")
    mentionedEntities Entity[]    @relation("entityMention")

    childrenComments  Content[]   @relation("ContentToContent")

    // parent for comments
    parentContent     Content?    @relation("ContentToContent", fields: [parentContentId], references: [id])
    parentContentId   String?

    likedBy           User[]      @relation("likes")
    dislikedBy        User[]      @relation("dislikes")

    parentEntity      Entity?

    // true or false for Post or FastPost, null for other types
    isDraft           Boolean?

    visible           Boolean     @default(true)

    // solo para publicaciones largas
    title             String?
}